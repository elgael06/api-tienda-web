{"ast":null,"code":"import { defaultDB } from \".\";\nexport default (async () => ({\n  db: await defaultDB(),\n\n  async existTable() {\n    //EMPRESAS\n    await this.db.run(`CREATE TABLE IF NOT EXISTS  Empresa (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            telefono TEXT,\n            direccion TEXT\n        )`); //USUARIOS\n\n    await this.db.run(`CREATE TABLE IF NOT EXISTS  Usuarios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            apPaterno TEXT,\n            apMaterno TEXT,    \n            puesto int        \n        )`); //LOGIN\n\n    await this.db.run(`CREATE TABLE IF NOT EXISTS loginUser (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            idUsuario int,\n            password TEXT\n        )`); //REGISTRO\n\n    await this.db.run(`CREATE TABLE IF NOT EXISTS registroLogin (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            idUsuario int,\n            fecha date,\n            hora datetime\n        )`);\n  },\n\n  async newEmpresa(nombre, telefono, direccion) {\n    await this.existTable();\n    const res = await this.db.run('INSERT INTO Empresa (nombre, telefono, direccion) values(?,?,?)', [nombre, telefono, direccion]);\n    this.db.close();\n    console.log('listo', res);\n    return res;\n  },\n\n  async newUsuario(nombre, apPaterno, apMaterno, puesto) {\n    await this.existTable();\n    await this.db.run('INSERT INTO Usuarios (nombre, apPaterno, apMaterno, puesto) values(?,?,?,?)', [nombre, apMaterno, apPaterno, puesto]);\n    const id = await this.db.run('select id from Usuarios LIMIT 1');\n    this.db.close();\n    console.log('listo', id);\n    return id;\n  },\n\n  async loginUser(idUsuario, password) {\n    const res = await this.db.run('INSERT INTO loginUser(idUsuario,password) VALUES(?,?)', [idUsuario, password]);\n    this.db.close();\n    console.log('ID', res.lastID);\n    return res;\n  }\n\n}));","map":{"version":3,"sources":["/home/gael/development/web/backend/nextJS/api-tienda-web/database/insert.ts"],"names":["defaultDB","db","existTable","run","newEmpresa","nombre","telefono","direccion","res","close","console","log","newUsuario","apPaterno","apMaterno","puesto","id","loginUser","idUsuario","password","lastID"],"mappings":"AAAA,SAASA,SAAT,QAA0B,GAA1B;AAEA,gBAAe,aAAa;AACxBC,EAAAA,EAAE,EAAE,MAAMD,SAAS,EADK;;AAExB,QAAME,UAAN,GAAkB;AACd;AACA,UAAM,KAAKD,EAAL,CAAQE,GAAR,CAAa;;;;;UAAb,CAAN,CAFc,CAQd;;AACA,UAAM,KAAKF,EAAL,CAAQE,GAAR,CAAa;;;;;;UAAb,CAAN,CATc,CAgBd;;AACA,UAAM,KAAKF,EAAL,CAAQE,GAAR,CAAa;;;;UAAb,CAAN,CAjBc,CAsBd;;AACA,UAAM,KAAKF,EAAL,CAAQE,GAAR,CAAa;;;;;UAAb,CAAN;AAMH,GA/BuB;;AAgCxB,QAAMC,UAAN,CACIC,MADJ,EAEIC,QAFJ,EAGIC,SAHJ,EAIC;AACG,UAAM,KAAKL,UAAL,EAAN;AACA,UAAMM,GAAG,GAAG,MAAM,KAAKP,EAAL,CAAQE,GAAR,CAAY,iEAAZ,EAA8E,CAACE,MAAD,EAASC,QAAT,EAAmBC,SAAnB,CAA9E,CAAlB;AACA,SAAKN,EAAL,CAAQQ,KAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBH,GAApB;AACA,WAAOA,GAAP;AACH,GA1CuB;;AA2CxB,QAAMI,UAAN,CACIP,MADJ,EAEIQ,SAFJ,EAGIC,SAHJ,EAIIC,MAJJ,EAKC;AACG,UAAM,KAAKb,UAAL,EAAN;AACA,UAAM,KAAKD,EAAL,CAAQE,GAAR,CAAY,6EAAZ,EACF,CAACE,MAAD,EAAQS,SAAR,EAAkBD,SAAlB,EAA4BE,MAA5B,CADE,CAAN;AAEA,UAAMC,EAAE,GAAG,MAAM,KAAKf,EAAL,CAAQE,GAAR,CAAY,iCAAZ,CAAjB;AACA,SAAKF,EAAL,CAAQQ,KAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBK,EAApB;AACA,WAAOA,EAAP;AACH,GAxDuB;;AAyDxB,QAAMC,SAAN,CACIC,SADJ,EAEIC,QAFJ,EAIC;AACG,UAAMX,GAAG,GAAG,MAAM,KAAKP,EAAL,CAAQE,GAAR,CAAY,uDAAZ,EAAoE,CAACe,SAAD,EAAWC,QAAX,CAApE,CAAlB;AACA,SAAKlB,EAAL,CAAQQ,KAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBH,GAAG,CAACY,MAArB;AACA,WAAOZ,GAAP;AAEH;;AAnEuB,CAAb,CAAf","sourcesContent":["import { defaultDB } from \".\";\n\nexport default async () => ({\n    db: await defaultDB(),\n    async existTable(){\n        //EMPRESAS\n        await this.db.run(`CREATE TABLE IF NOT EXISTS  Empresa (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            telefono TEXT,\n            direccion TEXT\n        )`);\n        //USUARIOS\n        await this.db.run(`CREATE TABLE IF NOT EXISTS  Usuarios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            apPaterno TEXT,\n            apMaterno TEXT,    \n            puesto int        \n        )`);\n        //LOGIN\n        await this.db.run(`CREATE TABLE IF NOT EXISTS loginUser (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            idUsuario int,\n            password TEXT\n        )`);\n        //REGISTRO\n        await this.db.run(`CREATE TABLE IF NOT EXISTS registroLogin (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            idUsuario int,\n            fecha date,\n            hora datetime\n        )`);\n    },\n    async newEmpresa(\n        nombre      : String,\n        telefono    : String,\n        direccion   : String\n    ){\n        await this.existTable();\n        const res = await this.db.run('INSERT INTO Empresa (nombre, telefono, direccion) values(?,?,?)',[nombre, telefono, direccion]);\n        this.db.close();\n        console.log('listo',res);\n        return res;\n    },\n    async newUsuario(\n        nombre:String,\n        apPaterno: String,\n        apMaterno: String,\n        puesto:number\n    ){\n        await this.existTable();\n        await this.db.run('INSERT INTO Usuarios (nombre, apPaterno, apMaterno, puesto) values(?,?,?,?)',\n            [nombre,apMaterno,apPaterno,puesto]);\n        const id = await this.db.run('select id from Usuarios LIMIT 1')\n        this.db.close();\n        console.log('listo',id);\n        return id;\n    },\n    async loginUser(\n        idUsuario:number,\n        password:string,\n\n    ){\n        const res = await this.db.run('INSERT INTO loginUser(idUsuario,password) VALUES(?,?)',[idUsuario,password]);\n        this.db.close();\n        console.log('ID',res.lastID);\n        return res;\n\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}