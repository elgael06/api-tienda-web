{"ast":null,"code":"import sqlite from 'sqlite';\nconst dirDB = './database.sqlite';\nexport const select = async () => ({\n  db: await sqlite.open(dirDB),\n\n  async allEmpresar() {\n    try {\n      const empresas = (await this.db.all('SELECT * FROM Empresa').catch(() => [])) || [];\n      console.log(\"Empresas =>\", JSON.stringify(empresas, null, 2));\n      this.db.close();\n      return {\n        error: false,\n        data: empresas\n      };\n    } catch (e) {\n      return {\n        error: true,\n        message: e.toString()\n      };\n    }\n  },\n\n  async idEmpresa(id) {\n    const empresa = await this.db.get('SELECT * FROM Empresa where id=?', [id]);\n    this.db.close();\n    return empresa || null;\n  }\n\n});\nexport const insert = async () => ({\n  db: await sqlite.open(dirDB),\n\n  async existTable() {\n    await this.db.run(`CREATE TABLE IF NOT EXISTS  Empresa (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            telefono TEXT,\n            direccion TEXT\n        )`);\n    this.db.close();\n  },\n\n  async newEmpresa(nombre, telefono, direccion) {\n    this.existTable();\n    const res = await this.db.run('INSERT INTO Empresa (nombre, telefono, direccion) values(?,?,?)', [nombre, telefono, direccion]);\n    this.db.close();\n    console.log('listo', res);\n    return res;\n  }\n\n});","map":{"version":3,"sources":["/home/gael/development/web/backend/nextJS/api-tienda-web/database/index.ts"],"names":["sqlite","dirDB","select","db","open","allEmpresar","empresas","all","catch","console","log","JSON","stringify","close","error","data","e","message","toString","idEmpresa","id","empresa","get","insert","existTable","run","newEmpresa","nombre","telefono","direccion","res"],"mappings":"AAAA,OAAOA,MAAP,MAAoB,QAApB;AAEA,MAAMC,KAAK,GAAG,mBAAd;AAEA,OAAO,MAAMC,MAAM,GAAG,aAAW;AAC7BC,EAAAA,EAAE,EAAG,MAAMH,MAAM,CAACI,IAAP,CAAYH,KAAZ,CADkB;;AAE7B,QAAMI,WAAN,GAAmB;AACf,QAAG;AACC,YAAMC,QAAQ,GAAG,OAAM,KAAKH,EAAL,CAAQI,GAAR,CAAY,uBAAZ,EACtBC,KADsB,CAChB,MAAI,EADY,CAAN,KACC,EADlB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,IAAI,CAACC,SAAL,CAAeN,QAAf,EAAwB,IAAxB,EAA6B,CAA7B,CAA3B;AACA,WAAKH,EAAL,CAAQU,KAAR;AACA,aAAO;AAACC,QAAAA,KAAK,EAAC,KAAP;AAAaC,QAAAA,IAAI,EAACT;AAAlB,OAAP;AACH,KAND,CAMC,OAAMU,CAAN,EAAQ;AACL,aAAO;AAACF,QAAAA,KAAK,EAAC,IAAP;AAAYG,QAAAA,OAAO,EAACD,CAAC,CAACE,QAAF;AAApB,OAAP;AACH;AACJ,GAZ4B;;AAa7B,QAAMC,SAAN,CAAgBC,EAAhB,EAA0B;AACtB,UAAMC,OAAO,GAAI,MAAM,KAAKlB,EAAL,CAAQmB,GAAR,CAAY,kCAAZ,EAA+C,CAACF,EAAD,CAA/C,CAAvB;AACA,SAAKjB,EAAL,CAAQU,KAAR;AACA,WAAOQ,OAAO,IAAI,IAAlB;AACH;;AAjB4B,CAAX,CAAf;AAoBP,OAAO,MAAME,MAAM,GAAG,aAAa;AAC/BpB,EAAAA,EAAE,EAAG,MAAMH,MAAM,CAACI,IAAP,CAAYH,KAAZ,CADoB;;AAE/B,QAAMuB,UAAN,GAAkB;AACd,UAAM,KAAKrB,EAAL,CAAQsB,GAAR,CAAa;;;;;UAAb,CAAN;AAMA,SAAKtB,EAAL,CAAQU,KAAR;AACH,GAV8B;;AAW/B,QAAMa,UAAN,CACIC,MADJ,EAEIC,QAFJ,EAGIC,SAHJ,EAIC;AACG,SAAKL,UAAL;AACA,UAAMM,GAAG,GAAG,MAAM,KAAK3B,EAAL,CAAQsB,GAAR,CAAY,iEAAZ,EAA8E,CAACE,MAAD,EAASC,QAAT,EAAmBC,SAAnB,CAA9E,CAAlB;AACA,SAAK1B,EAAL,CAAQU,KAAR;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBoB,GAApB;AACA,WAAOA,GAAP;AACH;;AArB8B,CAAb,CAAf","sourcesContent":["import sqlite  from 'sqlite';\n\nconst dirDB = './database.sqlite';\n\nexport const select = async ()=>({\n    db : await sqlite.open(dirDB),\n    async allEmpresar(){\n        try{\n            const empresas = await this.db.all('SELECT * FROM Empresa')\n            .catch(()=>[]) || [];\n            console.log(\"Empresas =>\", JSON.stringify(empresas,null,2));\n            this.db.close();\n            return {error:false,data:empresas};\n        }catch(e){\n            return {error:true,message:e.toString()};\n        }\n    },\n    async idEmpresa(id:number){\n        const empresa =  await this.db.get('SELECT * FROM Empresa where id=?',[id]);\n        this.db.close();\n        return empresa || null;\n    }\n});\n\nexport const insert = async () => ({\n    db : await sqlite.open(dirDB),\n    async existTable(){\n        await this.db.run(`CREATE TABLE IF NOT EXISTS  Empresa (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            telefono TEXT,\n            direccion TEXT\n        )`);\n        this.db.close();\n    },\n    async newEmpresa(\n        nombre      : String,\n        telefono    : String,\n        direccion   : String\n    ){\n        this.existTable();\n        const res = await this.db.run('INSERT INTO Empresa (nombre, telefono, direccion) values(?,?,?)',[nombre, telefono, direccion]);\n        this.db.close();\n        console.log('listo',res);\n        return res;\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}