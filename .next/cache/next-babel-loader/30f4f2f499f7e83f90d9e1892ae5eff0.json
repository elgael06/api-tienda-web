{"ast":null,"code":"import sqlite from 'sqlite';\nimport { dirDB } from './';\nexport default (async () => ({\n  db: await sqlite.open(dirDB),\n\n  //empresa\n  async allEmpresar() {\n    try {\n      const empresas = (await this.db.all('SELECT * FROM Empresa').catch(() => [])) || [];\n      console.log(\"Empresas =>\", JSON.stringify(empresas, null, 2));\n      this.db.close();\n      return {\n        error: false,\n        data: empresas\n      };\n    } catch (e) {\n      return {\n        error: true,\n        message: e.toString()\n      };\n    }\n  },\n\n  async idEmpresa(id) {\n    const empresa = await this.db.get('SELECT * FROM Empresa where id=?', [id]);\n    this.db.close();\n    return empresa || null;\n  },\n\n  //usuario\n  async allUsuario() {\n    try {\n      const usuarios = (await this.db.all('SELECT * FROM Usuarios').catch(() => [])) || [];\n      console.log(`usuarios => `, JSON.stringify(usuarios, null, 2));\n      this.db.close();\n      return {\n        error: false,\n        data: usuarios\n      };\n    } catch (e) {\n      return {\n        error: true,\n        message: e.toString()\n      };\n    }\n  },\n\n  async idUsuario(id) {\n    try {\n      const usuario = (await this.db.run('SELECT * FROM Usuarios where id=?', [id]).catch(() => [])) || [];\n      console.log(`usuarios => `, JSON.stringify(usuario, null, 2));\n      this.db.close();\n      return {\n        error: false,\n        data: usuario\n      };\n    } catch (e) {\n      return {\n        error: true,\n        message: e.toString()\n      };\n    }\n  }\n\n}));","map":{"version":3,"sources":["/home/gael/development/web/backend/nextJS/api-tienda-web/database/select.ts"],"names":["sqlite","dirDB","db","open","allEmpresar","empresas","all","catch","console","log","JSON","stringify","close","error","data","e","message","toString","idEmpresa","id","empresa","get","allUsuario","usuarios","idUsuario","usuario","run"],"mappings":"AAAA,OAAOA,MAAP,MAAoB,QAApB;AACA,SAASC,KAAT,QAAsB,IAAtB;AAEA,gBAAe,aAAW;AACtBC,EAAAA,EAAE,EAAG,MAAMF,MAAM,CAACG,IAAP,CAAYF,KAAZ,CADW;;AAEtB;AACA,QAAMG,WAAN,GAAmB;AACf,QAAG;AACC,YAAMC,QAAQ,GAAG,OAAM,KAAKH,EAAL,CAAQI,GAAR,CAAY,uBAAZ,EAClBC,KADkB,CACZ,MAAI,EADQ,CAAN,KACK,EADtB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,IAAI,CAACC,SAAL,CAAeN,QAAf,EAAwB,IAAxB,EAA6B,CAA7B,CAA3B;AACA,WAAKH,EAAL,CAAQU,KAAR;AACA,aAAO;AAACC,QAAAA,KAAK,EAAC,KAAP;AAAaC,QAAAA,IAAI,EAACT;AAAlB,OAAP;AACH,KAND,CAMC,OAAMU,CAAN,EAAQ;AACL,aAAO;AAACF,QAAAA,KAAK,EAAC,IAAP;AAAYG,QAAAA,OAAO,EAACD,CAAC,CAACE,QAAF;AAApB,OAAP;AACH;AACJ,GAbqB;;AActB,QAAMC,SAAN,CAAgBC,EAAhB,EAA0B;AACtB,UAAMC,OAAO,GAAI,MAAM,KAAKlB,EAAL,CAAQmB,GAAR,CAAY,kCAAZ,EAA+C,CAACF,EAAD,CAA/C,CAAvB;AACA,SAAKjB,EAAL,CAAQU,KAAR;AACA,WAAOQ,OAAO,IAAI,IAAlB;AACH,GAlBqB;;AAmBtB;AACA,QAAME,UAAN,GAAkB;AACd,QAAG;AACC,YAAMC,QAAQ,GAAG,OAAM,KAAKrB,EAAL,CAAQI,GAAR,CAAY,wBAAZ,EAClBC,KADkB,CACZ,MAAI,EADQ,CAAN,KACK,EADtB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAb,EAA4BC,IAAI,CAACC,SAAL,CAAeY,QAAf,EAAwB,IAAxB,EAA6B,CAA7B,CAA5B;AACA,WAAKrB,EAAL,CAAQU,KAAR;AACA,aAAO;AAACC,QAAAA,KAAK,EAAC,KAAP;AAAaC,QAAAA,IAAI,EAACS;AAAlB,OAAP;AAEH,KAPD,CAOC,OAAMR,CAAN,EAAQ;AACL,aAAO;AAACF,QAAAA,KAAK,EAAC,IAAP;AAAYG,QAAAA,OAAO,EAACD,CAAC,CAACE,QAAF;AAApB,OAAP;AACH;AACJ,GA/BqB;;AAgCtB,QAAMO,SAAN,CAAgBL,EAAhB,EAA0B;AACtB,QAAG;AACC,YAAMM,OAAO,GAAG,OAAM,KAAKvB,EAAL,CAAQwB,GAAR,CAAY,mCAAZ,EAAgD,CAACP,EAAD,CAAhD,EACjBZ,KADiB,CACX,MAAI,EADO,CAAN,KACM,EADtB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAb,EAA4BC,IAAI,CAACC,SAAL,CAAec,OAAf,EAAuB,IAAvB,EAA4B,CAA5B,CAA5B;AACA,WAAKvB,EAAL,CAAQU,KAAR;AACA,aAAO;AAACC,QAAAA,KAAK,EAAC,KAAP;AAAaC,QAAAA,IAAI,EAACW;AAAlB,OAAP;AAEH,KAPD,CAOC,OAAMV,CAAN,EAAQ;AACL,aAAO;AAACF,QAAAA,KAAK,EAAC,IAAP;AAAYG,QAAAA,OAAO,EAACD,CAAC,CAACE,QAAF;AAApB,OAAP;AACH;AACJ;;AA3CqB,CAAX,CAAf","sourcesContent":["import sqlite  from 'sqlite';\nimport { dirDB } from './'\n\nexport default async ()=>({\n    db : await sqlite.open(dirDB),\n    //empresa\n    async allEmpresar(){\n        try{\n            const empresas = await this.db.all('SELECT * FROM Empresa')\n                .catch(()=>[]) || [];\n            console.log(\"Empresas =>\", JSON.stringify(empresas,null,2));\n            this.db.close();\n            return {error:false,data:empresas};\n        }catch(e){\n            return {error:true,message:e.toString()};\n        }\n    },\n    async idEmpresa(id:number){\n        const empresa =  await this.db.get('SELECT * FROM Empresa where id=?',[id]);\n        this.db.close();\n        return empresa || null;\n    },\n    //usuario\n    async allUsuario(){\n        try{\n            const usuarios = await this.db.all('SELECT * FROM Usuarios')\n                .catch(()=>[]) || [];\n            console.log(`usuarios => `, JSON.stringify(usuarios,null,2));\n            this.db.close();\n            return {error:false,data:usuarios};\n\n        }catch(e){\n            return {error:true,message:e.toString()};\n        }\n    },\n    async idUsuario(id:number){\n        try{\n            const usuario = await this.db.run('SELECT * FROM Usuarios where id=?',[id])\n                .catch(()=>[]) || [];\n            console.log(`usuarios => `, JSON.stringify(usuario,null,2));\n            this.db.close();\n            return {error:false,data:usuario};\n\n        }catch(e){\n            return {error:true,message:e.toString()};\n        }\n    }\n\n});\n"]},"metadata":{},"sourceType":"module"}