{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport sqlite from 'sqlite';\nexport const select = async () => ({\n  db: await sqlite.open('./database.sqlite'),\n\n  async allEmpresar() {\n    try {\n      const empresas = (await this.db.all('SELECT * FROM Empresa').catch(() => [])) || [];\n      console.log(\"Empresas =>\", JSON.stringify(empresas, null, 2));\n      return _objectSpread({\n        error: false\n      }, empresas);\n    } catch (e) {\n      return {\n        error: true,\n        message: e.toString()\n      };\n    }\n  }\n\n});","map":{"version":3,"sources":["/home/gael/development/web/backend/nextJS/api-tienda-web/database/index.ts"],"names":["sqlite","select","db","open","allEmpresar","empresas","all","catch","console","log","JSON","stringify","error","e","message","toString"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAoB,QAApB;AAEA,OAAO,MAAMC,MAAM,GAAG,aAAW;AAC7BC,EAAAA,EAAE,EAAG,MAAMF,MAAM,CAACG,IAAP,CAAY,mBAAZ,CADkB;;AAE7B,QAAMC,WAAN,GAAmB;AACf,QAAG;AACC,YAAMC,QAAQ,GAAG,OAAM,KAAKH,EAAL,CAAQI,GAAR,CAAY,uBAAZ,EACtBC,KADsB,CAChB,MAAI,EADY,CAAN,KACC,EADlB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,IAAI,CAACC,SAAL,CAAeN,QAAf,EAAwB,IAAxB,EAA6B,CAA7B,CAA3B;AACA;AAAQO,QAAAA,KAAK,EAAC;AAAd,SAAuBP,QAAvB;AACH,KALD,CAKC,OAAMQ,CAAN,EAAQ;AACL,aAAO;AAACD,QAAAA,KAAK,EAAC,IAAP;AAAYE,QAAAA,OAAO,EAACD,CAAC,CAACE,QAAF;AAApB,OAAP;AACH;AACJ;;AAX4B,CAAX,CAAf","sourcesContent":["import sqlite  from 'sqlite';\n\nexport const select = async ()=>({\n    db : await sqlite.open('./database.sqlite'),\n    async allEmpresar(){\n        try{\n            const empresas = await this.db.all('SELECT * FROM Empresa')\n            .catch(()=>[]) || [];\n            console.log(\"Empresas =>\", JSON.stringify(empresas,null,2));\n            return {error:false,...empresas};\n        }catch(e){\n            return {error:true,message:e.toString()};\n        }\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}