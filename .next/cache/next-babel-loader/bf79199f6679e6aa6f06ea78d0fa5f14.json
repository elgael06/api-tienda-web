{"ast":null,"code":"import { defaultDB } from \".\";\nexport default (async () => ({\n  db: await defaultDB(),\n\n  async existTable() {\n    //EMPRESAS\n    await this.db.run(`CREATE TABLE IF NOT EXISTS  Empresa (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            telefono TEXT,\n            direccion TEXT\n        )`); //USUARIOS\n\n    await this.db.run(`CREATE TABLE IF NOT EXISTS  Usuarios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            apPaterno TEXT,\n            apMaterno TEXT,    \n            puesto int        \n        )`); //LOGIN\n\n    await this.db.run(`CREATE TABLE IF NOT EXISTS loginUser (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            idUsuario int,\n            password TEXT\n        )`); //REGISTRO\n\n    await this.db.run(`CREATE TABLE IF NOT EXISTS registroLogin (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            idUsuario int,\n            fecha date,\n            hora datetime\n        )`);\n  },\n\n  async newEmpresa(nombre, telefono, direccion) {\n    await this.existTable();\n    const res = await this.db.run('INSERT INTO Empresa (nombre, telefono, direccion) values(?,?,?)', [nombre, telefono, direccion]);\n    this.db.close();\n    console.log('listo', res);\n    return res;\n  },\n\n  async newUsuario(nombre, apPaterno, apMaterno, puesto) {\n    await this.existTable();\n    await this.db.run('INSERT INTO Usuarios (nombre, apPaterno, apMaterno, puesto) values(?,?,?,?)', [nombre, apMaterno, apPaterno, puesto]);\n    const id = await this.db.all('select * from Usuarios order by id desc LIMIT 1');\n    this.db.close();\n    console.log('listo', id);\n    return id;\n  },\n\n  async loginUser(idUsuario, password) {\n    const res = await this.db.run('INSERT INTO loginUser(idUsuario,password) VALUES(?,?)', [idUsuario, password]);\n    this.db.close();\n    console.log('ID', res.lastID);\n    return res;\n  }\n\n}));","map":null,"metadata":{},"sourceType":"module"}