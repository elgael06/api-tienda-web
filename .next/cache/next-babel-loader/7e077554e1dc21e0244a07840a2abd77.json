{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport sqlite from 'sqlite';\nconst dirDB = './database.sqlite';\nexport const select = async () => ({\n  db: await sqlite.open(dirDB),\n\n  async allEmpresar() {\n    try {\n      const empresas = (await this.db.all('SELECT * FROM Empresa').catch(() => [])) || [];\n      console.log(\"Empresas =>\", JSON.stringify(empresas, null, 2));\n      this.db.close();\n      return _objectSpread({\n        error: false\n      }, empresas);\n    } catch (e) {\n      return {\n        error: true,\n        message: e.toString()\n      };\n    }\n  }\n\n});\nexport const insert = async () => ({\n  db: await sqlite.open(dirDB),\n\n  async existTable() {\n    await this.db.run(`CREATE TABLE IF NOT EXISTS  Empresa (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            telefono TEXT,\n            direccion TEXT\n        );`);\n  },\n\n  async newEmpresa(nombre, telefono, direccion) {\n    this.existTable();\n    const res = await this.db.run('INSERT INTO Empresa (nombre, telefono, direccion) values', [nombre, telefono, direccion]);\n    console.log('listo', res);\n    return res;\n  }\n\n});","map":{"version":3,"sources":["/home/gael/development/web/backend/nextJS/api-tienda-web/database/index.ts"],"names":["sqlite","dirDB","select","db","open","allEmpresar","empresas","all","catch","console","log","JSON","stringify","close","error","e","message","toString","insert","existTable","run","newEmpresa","nombre","telefono","direccion","res"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAoB,QAApB;AAEA,MAAMC,KAAK,GAAG,mBAAd;AAEA,OAAO,MAAMC,MAAM,GAAG,aAAW;AAC7BC,EAAAA,EAAE,EAAG,MAAMH,MAAM,CAACI,IAAP,CAAYH,KAAZ,CADkB;;AAE7B,QAAMI,WAAN,GAAmB;AACf,QAAG;AACC,YAAMC,QAAQ,GAAG,OAAM,KAAKH,EAAL,CAAQI,GAAR,CAAY,uBAAZ,EACtBC,KADsB,CAChB,MAAI,EADY,CAAN,KACC,EADlB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,IAAI,CAACC,SAAL,CAAeN,QAAf,EAAwB,IAAxB,EAA6B,CAA7B,CAA3B;AACA,WAAKH,EAAL,CAAQU,KAAR;AACA;AAAQC,QAAAA,KAAK,EAAC;AAAd,SAAuBR,QAAvB;AACH,KAND,CAMC,OAAMS,CAAN,EAAQ;AACL,aAAO;AAACD,QAAAA,KAAK,EAAC,IAAP;AAAYE,QAAAA,OAAO,EAACD,CAAC,CAACE,QAAF;AAApB,OAAP;AACH;AACJ;;AAZ4B,CAAX,CAAf;AAeP,OAAO,MAAMC,MAAM,GAAG,aAAa;AAC/Bf,EAAAA,EAAE,EAAG,MAAMH,MAAM,CAACI,IAAP,CAAYH,KAAZ,CADoB;;AAE/B,QAAMkB,UAAN,GAAkB;AACd,UAAM,KAAKhB,EAAL,CAAQiB,GAAR,CAAa;;;;;WAAb,CAAN;AAMH,GAT8B;;AAU/B,QAAMC,UAAN,CACIC,MADJ,EAEIC,QAFJ,EAGIC,SAHJ,EAIC;AACG,SAAKL,UAAL;AACA,UAAMM,GAAG,GAAG,MAAM,KAAKtB,EAAL,CAAQiB,GAAR,CAAY,0DAAZ,EAAuE,CAACE,MAAD,EAASC,QAAT,EAAmBC,SAAnB,CAAvE,CAAlB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBe,GAApB;AACA,WAAOA,GAAP;AACH;;AAnB8B,CAAb,CAAf","sourcesContent":["import sqlite  from 'sqlite';\n\nconst dirDB = './database.sqlite';\n\nexport const select = async ()=>({\n    db : await sqlite.open(dirDB),\n    async allEmpresar(){\n        try{\n            const empresas = await this.db.all('SELECT * FROM Empresa')\n            .catch(()=>[]) || [];\n            console.log(\"Empresas =>\", JSON.stringify(empresas,null,2));\n            this.db.close();\n            return {error:false,...empresas};\n        }catch(e){\n            return {error:true,message:e.toString()};\n        }\n    }\n});\n\nexport const insert = async () => ({\n    db : await sqlite.open(dirDB),\n    async existTable(){\n        await this.db.run(`CREATE TABLE IF NOT EXISTS  Empresa (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT,\n            telefono TEXT,\n            direccion TEXT\n        );`);\n    },\n    async newEmpresa(\n        nombre      : String,\n        telefono    : String,\n        direccion   : String\n    ){\n        this.existTable();\n        const res = await this.db.run('INSERT INTO Empresa (nombre, telefono, direccion) values',[nombre, telefono, direccion]);\n        console.log('listo',res);\n        return res;\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}